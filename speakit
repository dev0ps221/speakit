#!/usr/bin/env python3
#CE SCRIPT NECESSITE UNE CONNECTIVITE A INTERNET

import gtts  
import PyPDF2
from os import remove
from optparse import OptionParser
from playsound import playsound  



class argsManager:

    parser = OptionParser()
    filename = None
    outfilename = None
    text     = None
    pdf     = None
    live = None
    lang = None

    def __setup_opts(self):
        
        self.parser.add_option("-f", "--file", dest="filename",
                        help="choisir le fichier a lire", metavar="FILE")

        self.parser.add_option("-l", "--lang", dest="lang",metavar="TEXT",
                        help="langue de lecture")

        self.parser.add_option("-L", "--live", dest="live",action="store_true",
                        help="lire le fichier en meme temps qu il est parcouru")

        self.parser.add_option("-P", "--pdf", dest="pdf",
                        help="choisir le fichier [pdf] a lire", metavar="FILE")

        self.parser.add_option("-o", "--outfile", dest="outfilename",
                        help="enregistrer dans le fichier", metavar="FILE")

        self.parser.add_option("-t", "--text", dest="text",
                        help="specifier le texte a lire")

    def __set_opts(self):
        (options, args) = self.parser.parse_args()
        for option in options.__dict__:
            self._set(option,options.__dict__[option])

    def gotopt(self,optname):
        return hasattr(self,optname)

    def _set(self,optname,optval):
        setattr(self,optname,optval)

    def get(self,optname):
        return getattr(self,optname) if self.gotopt(optname) else None

    def __init__(self):
        self.__setup_opts()
        self.__set_opts()

class ttsManager:
    "text to speak manager"
    lines = []
    text  = None
    def set_lines(self,lines):
        self.lines = lines

    def set_text(self,text=None):
        self.text = text  if text else ''.join(self.lines)
        
    def get_lines(self):
        return self.lines
        
    def get_text(self):
        return self.text

    def __init__(self,lines):
        self.set_lines(lines)
        self.set_text()

    def is_valid(self):
        return self.text

class ftsManager:
    "file to speak manager"

    file     = None
    filename = None
    text     = None

    def get_text(self):
        return self.text.get_text() if self.text else ""

    def get_lines(self):
        return self.text.get_lines() if self.text else []

    def read_file(self):
        self.file = open(self.filename,'r')
        if self.is_valid():
            self.text = ttsManager(self.file.readlines())
        self.file.close()

    def is_valid(self):
        return (self.text and self.text.is_valid()) or (not self.file.closed and self.file.readable())

    def set_filename(self,filename):
        self.filename = filename
        
    def __init__(self,filename):
        self.set_filename(filename)
        self.read_file()


class ptsManager(ftsManager):
    "pdf to speak manager"

    def read_file(self):
        self.file = open(self.filename,'rb')
        if self.is_valid():
            pdfReader = PyPDF2.PdfFileReader(self.file)
            lines = []
            for page in pdfReader.pages:
                [lines.append(line) for line in page.extractText().split('\n')]
            self.text = ttsManager(lines)
        self.file.close()



class SpeakIt:

    datasource = None

    def speak(self,data=None,lang='fr'):
        recv_data = None
        if data :
            recv_data = True
        try:

            if recv_data:
                speakdata = gtts.gTTS(data,lang=lang)
                speakdata.save('temp.mp3')
                playsound('temp.mp3')
                remove('temp.mp3')
                
            else:
                lang = self.args.get('lang') if self.args.get('outfilename') else lang
                data = ["Les donnees specifiees sont incorrectes"]
                if self.__has_correct_data():
                    data = self.data.get_lines()
                
                if type(data) is str:
                    speakdata = gtts.gTTS(data,lang=lang)
                    speakdata.save('temp.mp3')
                    playsound('temp.mp3')
                    if self.args.get('outfilename'):
                        speakdata.save(self.args.get('outfilename'))
                    remove('temp.mp3')
                else:
                    for line in data:
                        print(line)
                        gtts.gTTS(line,lang=lang).save('temp.mp3')
                        playsound('temp.mp3')
                        if self.args.get('outfilename'):
                            of = open(self.args.get('outfilename'),'ba+')
                            sf = open('temp.mp3','br')
                            of.write(sf.read())
                            of.close()
                            sf.close()
                        remove('temp.mp3')
        except Exception as e:
            print(e)        

    def __init_data(self):
        if self.args.get('filename'):
            self.data = ftsManager(self.args.get('filename'))
        elif self.args.get('pdf'):
            self.data = ptsManager(self.args.get('pdf'))
        elif self.args.get('text'):
            self.data = ttsManager(self.args.get('text'))

    def __has_correct_data(self):
        return self.data and self.data.is_valid()

    def __run__(self):
        "just run"
        self.__init_data()
        self.speak()


    def __interact__(self):
        "interact"
        #prints the basic usage until implementation
        self.args.parser.print_help()

    def check_args(self):
        return self.args.get('filename') or self.args.get('text') or self.args.get('pdf')

    def __init__(self):
        try:
            self.args = argsManager()
            if self.check_args():
                self.__run__()
            else:
                self.__interact__()
        except KeyboardInterrupt as e:
            self.speak('au revoir',lang='fr')
            exit()


speaker = SpeakIt()